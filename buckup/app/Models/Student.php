<?php

namespace App\Models;

use App\Models\UserAnswer;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Collection;

class Student extends Authenticatable
{
    use HasFactory;

    const ADMIN = '2';

    const STUDENT = '1';

    const PROCTOR = '3';
    const INSTRUCTOR = '4';
    
    protected $table = 'users';

    protected $primaryKey = 'ID';

    public $BindKey = 'ID';

    protected $fillable = [
        'User_Name', 'Email', 'alt_email', 'phone', 'Full_Name', 'Phone', 'Password', 'Full_Name', 'Type_ID', 'ExamType', 'questions_num', 'exam_time',
        'company','month_of_birth','day_of_birth','country','city','postal_code','position','image','employee_id','image'
    ];

    public function hasAltEmail()
    {
        return $this->alt_email;
    }
    public function getBirthDayMonth()
    {
        return $this->month_of_birth ;
    }
    public function getEmail()
    {
        return $this->Email ;
    }
    public function getPhone()
    {
        return $this->Phone ; 
    }
    public function getCountry()
    {
        return $this->country  ; 
    }

    public function getCity()
    {
        return $this->city ;
    }

    public function getPostalCode()
    {
        return $this->postal_code ;
    }

    public function getCompany()
    {
        return $this->company ; 
    }
    public function getPosition()
    {
        return $this->position ;
    }

    public function getEmployeeId()
    {
        return $this->employee_id ; 
    }

    public function image()
    {
        return asset('storage/'.$this->image) ; 
    }
    
    public function getBirthDayDay()
    {
        return $this->day_of_birth ;
    }
    public function scopeOnlyAdmins($builder)
    {
        return $builder->where(function($query){
            return $query->where('Type_ID', self::ADMIN)->orWhere('Type_ID',self::PROCTOR);

        });
    }

    public function isAdmin():bool
    {
        return $this->Type_ID == self::ADMIN;
    }

    public function getRouteKeyName()
    {
        return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
    }

    public function exams():belongsToMany
    {
        return $this->belongsToMany(Exam::class, 'user_exam', 'User_ID', 'exam_id', 'ID', 'id')
            ->withPivot(['Done', 'absence', 'score', 'passed','ID','Finished_At','entered_at','first_entered_at','ID','note']);
    }

    public function certifications()
    {
        return $this->hasMany(Certification::class, 'student_id', 'ID');
    }

    public function hasCertifications():bool
    {
        // dd($this);
        return $this->certifications->count() > 0;
    }

//    public function certifications():Collection
//    {
//        return $this->exams->map(function($exam){
//            return $exam->certification;
//        });
//    }

//    public function onlyDisplayedCertification():Collection
//    {
//        return $this->certifications()->filter(function($certification){
//            return $certification->display;
//        }) ;
//    }

    public function getDecryptedPass()
    {
        return $this->Password;
    }

    public function HasAbsenceExam():bool
    {
        return $this->pivot->absence;
    }

    public function assignCertification(array $certificationData, array $students, Exam $exam):void
    {
        foreach ($students as $student) {
            $certification = Certification::create(array_merge($certificationData, [
                'student_id'=>$student,
                'exam_id'=>$exam->id,
                'completed_date'
            ]));

            $certification->setCertificationId();

            $certification->setLink();

            $certification->setValidTo();

            $certification->setName();
        }
    }

    public function absenceExam($examId):bool
    {
        // dd($examId);

        // return $this->pivot->where('exam')
        return ($this->pivot->absence);

        // return $this->pivot->where('exam_id',$examId)->first()->absence ;

    }

    public function getUserNameAttribute()
    {
        return $this->attributes['User_Name'];
    }

    public function getUserName()
    {
        return $this->User_Name ; 
    }

    public function getPassword()
    {
        return $this->Password ; 
    }

    public function getEmailAttribute()
    {
        return $this->attributes['Email'];
    }

    public function getPhoneAttribute()
    {
        return $this->attributes['Phone'];
    }

    public function getTypeAttribute()
    {
        switch($this->attributes['Type_ID'])
        {
            case 1:
                return 'Student';
            case 2:
                return 'Admin';
            case 3: return 'Proctor';
            case 4: return 'Instructor';
        }
        // return $this->attributes['Type_ID'] == 2 ? 'Admin' : 'Student';
    }

//    public function setExamTypeAttribute($val)
//    {
//
//         $this->attributes['ExamType'] = ' ' ;
//    }
//
//    public function setquestionsNumAttribute()
//    {
//        return $this->attributes['questions_num'] = ' ' ;
//    }
//
//    public function setexamTimeAttribute()
//    {
//        return $this->attributes['exam_time'] = ' ' ;
//    }

    public function getExamScore():string
    {
        if ($this->pivot->score != null) {
            return $this->pivot->score.' % ';
        }

        return 'No Score Yet ( Click To Edit )';
    }

    public function getScoreFor(Exam $exam)
    {
        $certification = $exam->certifications()->where('student_id',$this->ID)->first() ;

        if($certification && $certification->score != null)
        {
            return $certification->score ;
        }
        if($this->exams()->wherePivot('exam_id',$exam->id)->first()->pivot->score != null)
        {
            return $this->exams()->wherePivot('exam_id',$exam->id)->first()->pivot->score ;
        }
        return 'No Score Yet ( Click To Edit )' ;

    }

    // public function HasPassedExam($exam):bool
    // {
    //     return $this->pivot->score >= $exam->pass_percentage;
    // }

    public function hasExam($exam_id):bool
    {
        return $this->exams()->where('exam_id', $exam_id)->exists();
    }

    public function usersResults():hasMany
    {
        return $this->hasMany(UserResult::class ,'User_ID','ID');
    }

    public function Answers($user_exam_id , $questionID=null)
    {
        // get user answers on this exam
        return UserAnswer::OnlyUserExam($user_exam_id)->OnlyQuestions($questionID);

    }

    public function HasNotFinishedExam(Exam $exam):bool
    {
        $exam->failedMessage = 'You Completed The Exam .. ' ;

        return ! (bool) $exam->pivot->Finished_At;
    }

    public function doesNotEnteredBefore(Exam $exam):bool
    {
        $exam->failedMessage = 'You Entered This Exam Before .. ! ' ;

        // I Will Determine If The Exam Entered Before From The entered_at Column
//return true  ;


        return true ; 
        // return  is_null($exam->pivot->entered_at) ;

    }

    public function isValidToEnterExam():array
    {
//        return [
//            'status'=>true ,
//        ] ;


      if($this->exams->count())
      {
        $latestExam = $this->exams()->latest()->first();


        $latestExam->failedMessage = 'You Had not Been Assigned To Any Exam ' ;

        if($latestExam && $latestExam->isValidForThisUser($this)) {

            return [
                'status'=>true ,
            ] ;
        }

        return [
            'status'=>false ,
            'reason'=>$latestExam->failedMessage
        ] ;
      }

      return [
        'status'=>false ,
        'reason'=>'You Had not Been Assigned To Any Exam'
    ] ;




    }

    public function isProctor()
    {
        return $this->Type_ID == Static::PROCTOR;
    }

       public function isInstructor()
    {
        return $this->Type_ID == Static::INSTRUCTOR;
    }

    // public function isStudent()
    // {
    //     dd( $this->Type_ID ==  Static::STUDENT);

    //     return $this->Type_ID == Static::STUDENT;
    // }

    public function getCurrentExamStatus()
    {
        $latestExam = $this->exams->last() ;



        if($latestExam->count())
        {
            $enteredDate = $latestExam->pivot->entered_at;

            $finished = $latestExam->pivot->Finished_At;

            $done = $latestExam->pivot->Done ;



            if($enteredDate && ( $finished ||  $done))
            {
                return 'Submitted';
            }
            elseif($enteredDate)
            {
                return 'Running';
            }
            else
            {
                return 'Not Entered Yet ';
            }
        }
    }
    public function getExamNote($exam_id)
    {

        if($this->exams->count())
        return $this->exams->where('id',$exam_id)->first()->pivot->note ;

    }

    public function PassedExam($returnPassedPercentage=false)
    {

        /* new  */
        // to put score for user that attend exam

//        dd($this->exams->last()->pivot->score);

        if($this->certifications->last() && $this->exams->last() &&  $this->exams->last()->pivot->score  && $returnPassedPercentage)
        {


            return  $this->exams->last()->pivot->score ;

        }
        elseif ($this->certifications->last() && $this->exams->last() &&  $this->exams->last()->pivot->score )
        {
            $percentage =  $this->exams->last()->pass_percentage ;
            $passedExamBool = $this->exams->last()->pivot->score > $percentage ;
            return (bool)$passedExamBool ? 'Passed' :'Failed' ;
        }


        /* End */


        // to put score for user that (not) attend exam through creating a new certifiaction
        if($this->certifications->last() && $this->certifications->last()->score && $returnPassedPercentage)
        {

            return $this->certifications->last()->score ;
        }
        elseif($this->certifications->last() && $this->certifications->last()->score)
        {
            return (bool)$this->certifications->last()->passed ? 'Passed' :'Failed' ;
        }


        if($this->certifications->last())
            $user = $this;
        $exam = $user->exams->last() ;

        $totalNumberOfQuestions  = $exam->no_questions ;


        $user_exam_id = $exam->pivot->ID;

        $answeredQuestions = UserAnswer::all()->where('Test_ID',$user_exam_id) ;


        $numberOfCorrectAnswers = 0 ;

        $numberOfMissedCorrectAnswers = 0 ;

        $answeredQuestions->each(function($answeredQuestion) use (&$numberOfCorrectAnswers,$answeredQuestions,& $numberOfMissedCorrectAnswers){

            $originQuestion = $answeredQuestion->question;

            $originalCorrectAnswer = $originQuestion->answers->where('Is_Right',1)->first();
            //  if($originalCorrectAnswer)
            // {

            // }

            // else
            // {
            //     dd($originalCorrectAnswer);
            // }
            if(is_null($originalCorrectAnswer))
            {
                $numberOfMissedCorrectAnswers++ ;
            }
            if( ($originalCorrectAnswer && $originalCorrectAnswer->ID == $answeredQuestion->Answer))
            {
                $numberOfCorrectAnswers++;

            }
        });

        $AnsweredPercentage = floor((($numberOfCorrectAnswers/($totalNumberOfQuestions - $numberOfMissedCorrectAnswers)) * 100)) ;

        if($returnPassedPercentage)
        {


            return $AnsweredPercentage ;
        }


        // $AnsweredPercentage = floor((($numberOfCorrectAnswers/($totalNumberOfQuestions - $numberOfMissedCorrectAnswers)) * 100));
        $passPercentage = $exam->pass_percentage;

        if($AnsweredPercentage >= $passPercentage)
        {
            return 'Passed' ;
        }
        return 'Failed';


    }

    public function getRightAndWrongQuestions()
    {
        $user =$this;
        $exam = $user->exams->last() ;

        if($this->certifications->last() && $this->certifications->last()->score &&  !(bool)$exam->pivot->score)
        {
            return [];
        }



        if($this->certifications->last() && $exam)
        {



            // $totalNumberOfQuestions  = $exam->no_questions ;

            $wrongAnswers = [];

            $user_exam_id = $exam->pivot->ID;

            $answeredQuestions = UserAnswer::all()->where('Test_ID',$user_exam_id) ;


            $numberOfCorrectAnswers = 0 ;

            $answeredQuestions->each(function($answeredQuestion) use (&$numberOfCorrectAnswers,&$wrongAnswers){

                $originQuestion = $answeredQuestion->question;
//                if($answeredQuestion->question)
//                {
//
//                }
//                else
//                {
//                    dd(Question::where('id',144)->first());
//                    dd($answeredQuestion);
//                }
                $originalCorrectAnswer = $originQuestion->answers->where('Is_Right',1)->first();


                if($originalCorrectAnswer)
                {
                    if($originalCorrectAnswer->ID == $answeredQuestion->Answer)
                    {
                        // $numberOfCorrectAnswers++;

                    }
                    else
                    {
                        if(is_null($answeredQuestion->Answer))
                        {


                            array_push($wrongAnswers ,  [
                                'question'=>$originQuestion->Question ,
                                'correctAnswer'=>$originQuestion->answers->where('Is_Right',1)->first()->Answer ,
                                'studentWrongAnswer'=>'no answer',


                            ]);
                        }
                        else
                        {


                            if($originQuestion->answers
                                ->where('ID',$answeredQuestion->Answer)->first())
                            {
                                array_push($wrongAnswers ,  [
                                    'question'=>$originQuestion->Question ,
                                    'correctAnswer'=>$originQuestion->answers->where('Is_Right',1)->first()->Answer ,
                                    'studentWrongAnswer'=>$originQuestion->answers
                                        ->where('ID',$answeredQuestion->Answer)->first()->Answer,


                                ]);
                            }

                        }
                        //     if($originQuestion->answers
                        //     ->where('ID',$answeredQuestion->Answer)->first())
                        //     {
                        //         array_push($wrongAnswers ,  [
                        //     'question'=>$originQuestion->Question ,
                        //     'correctAnswer'=>$originQuestion->answers->where('Is_Right',1)->first()->Answer ,
                        //     'studentWrongAnswer'=>$originQuestion->answers
                        //     ->where('ID',$answeredQuestion->Answer)->first()->Answer ,


                        //   ]);
                        //     }
                        //     else
                        //     {
                        //         dd($answeredQuestion);
                        //         dd($originQuestion->answers
                        //     ->where('ID',$answeredQuestion->Answer)->first());
                        //     }

                        //   ;
                    }
                }



            });

//dd($wrongAnswers);

            return $wrongAnswers ;
        }


        // $AnsweredPercentage = floor((($numberOfCorrectAnswers/$totalNumberOfQuestions ) * 100));

        // $passPercentage = $exam->pass_percentage;

        // if($AnsweredPercentage >= $passPercentage)
        // {
        //     return 'Passed' ;
        // }
        // return 'Failed';



        // dd($user );

        /* End Passed */
    }

    // public function PassedExam($returnPassedPercentage=false)
    // {
    //     $user =$this;

    //     $exam = $user->exams->last() ;

    //     $totalNumberOfQuestions  = $exam->no_questions ;


    //     $user_exam_id = $exam->pivot->ID;
    //     $answeredQuestions = UserAnswer::where('Test_ID',$user_exam_id)->get() ;
    //     $numberOfCorrectAnswers = 0 ;
    //     $answeredQuestions->each(function($answeredQuestion) use (&$numberOfCorrectAnswers){

    //         $originQuestion = Question::where('id',$answeredQuestion->Question_ID)->firstOrFail();

    //         if($originQuestion->answers->where('ID',$answeredQuestion->Answer)->where('Is_Right',1)->first())
    //         {
    //             $numberOfCorrectAnswers++;
    //         }

    //     });

    //     if($returnPassedPercentage)
    //     {


    //         return  floor((($numberOfCorrectAnswers/$totalNumberOfQuestions ) * 100));
    //     }

    //     $AnsweredPercentage = floor((($numberOfCorrectAnswers/$totalNumberOfQuestions ) * 100));

    //     $passPercentage = $exam->pass_percentage;

    //     if($AnsweredPercentage >= $passPercentage)
    //     {
    //         return 'Passed' ;
    //     }
    //     return 'Failed';




    //     /* End Passed */
    // }
    public function isPassedExam()
    {
        return $this->PassedExam() === 'Passed';
    }

    public function getExamPercentage()
    {
        return $this->PassedExam(true) ;
    }

    public function getFormattedExamPercentage()
    {
        $examPercentage = $this->getExamPercentage();

        return $examPercentage == 0 ? 0 : $examPercentage . ' %';
    }

    public function getCertificationTopics()
    {
        $userPercentage = $this->getExamPercentage(true);
        // $userPercentage = 75;


        switch($userPercentage)
        {
            case $userPercentage >= 80 && $userPercentage<90  :
                return [
                    'Kick Detection:'=>['Pit Gain'=>'Explain why it is important to monitor pit levels at all times when the rig is connected to the well (for example, open hole always has a potential to flow; tested barriers may fail).']
                ,'Post Shutin Monitoring & Activities:'=>['Analysis of Shut-In Conditions'=>'Explain Shut-In Drill pipe Pressure (SI DPP) and Shut-In Casing Pressure (SICP).'],
                'Risk Management:'=>[' Managing Change during a Well Kill'=>'Identify problems that can happen during a well control operation (for example, plugging; washouts; losses; equipment issues).'],
                'Well Control Concepts:'=>['Principle of ll-Tube'=>'Explain the principle of a u-tube.'],
                'Well Control in High Angle Wells'=>['Principle of u-Tube'=>'Explain the principle of a u-tube.','Well Control in High Angle Wells'=>'Interpret shut-in pressures for high angle wells and explain how they impact well kill operations.'] ,
                'Well Control Methods:'=>['Driller\'s Method'=>'Explain the basic principles and steps involved in the Driller\'s Method.']

                 ,

            ];
            case $userPercentage >= 90 && $userPercentage<=100 :

              return [
                    'Equipment:'=>['Manifolds, Piping, and Valves'=>'Explain the function of this equipment in the well control process.']
                ,'Post Shutin Monitoring & Activities:'=>['Analysis of Shut-In Conditions'=>'Explain Shut-In Drill pipe Pressure (SI DPP) and Shut-In Casing Pressure (SICP).'],
                'Risk Management:'=>[' Managing Change during a Well Kill'=>'Identify problems that can happen during a well control operation (for example, plugging; washouts; losses; equipment issues).'],
                'Well Control Concepts:'=>['Principle of u-Tube'=>'Explain the principle of a u-tube.'],
              ];
              case $userPercentage >= 75 && $userPercentage<80:

                return [
                    'Causes of Kicks:'=>['Running/Pulling Liners and Casing'=>'Explain how running/pulling casing affects BHP (for example, swabbing and surging).']
                ,'Equipment:'=>['Drillstring Valves'=>'Explain the purpose of key items of this equipment (for example, Inside BOPs, full opening safety valves [including top-drive/Kelly valves], non- return valves, \'dart\' valves, float valves in drillstring, casing, and crossovers).' , 'Function Tests and Pressure Tests'=>'Describe a function test and a pressure test; explain the differences between the two tests.',' Mud-Gas Separator'=>'Explain the purpose and location of the mud-gas separator in the circulating system'],
                'Kick Prevention during Drilling, Casing, & Cementing Operations:'=>['Casing and Cementing Operations'=>'Explain what can increase the risk of swabbing and surging during casing operations (for example, narrow clearance; mud conditions; running or pulling speed; heave at connections; casing centralizers, etc.).'],
                'Post Shutin Monitoring & Activities:'=>['Analysis of Shut-In Conditions'=>'Explain Shut-In Drillpipe Pressure (SIDPP) and Shut-In Casing Pressure (SICP).'],
                'Pre-Recorded Data:'=>['Kill Sheet'=>'Calculate and update pre-kick data on a kill sheet (for example, volumes, strokes, SCR/CLF, MAASP/MAMW, depths, diameters, and daily recorded values; data to add following shut-in [SIDPP, SICP, and pit gain]).'] ,
                'Risk Management:'=>['Handling Kill Problems and Effect of Incorrect Procedures'=>'Identify problems that can happen during a well control operation (for example, plugging; washouts; losses; equipment issues).'],
                'Well Control Concepts:'=>['Formation Stresses and Strength'=>'Explain the term "formation strength.' , 'Gas Behavior in Fluids'=>'Explain the effects of gas on hydrostatic and BHP (for example, it reduces hydrostatic pressure as gas expands and can cause underbalance; the gas cut mud at surface effect or re-circulating gas-cut mud','Tapered Drillstring'=>'Explain how a tapered string will affect fluid displacement.']  ,
                'Well Control Methods:'=>['Driller\'s Method'=>'Explain the basic principles and steps involved in the Driller\'s Method.','Pump Startup and Shutdown Procedure'=>'Explain the importance of using startup and shutdown procedure in a well kill (for example, to maintain BHP)'],


                ];

                case $userPercentage < 75 :

                    return [
                        'Abnormal Pressure Warning Signs:'=>['Trend Analysis'=>'Give examples of how abnormal pressure affects primary control in the wellbore.']
                    ,'Causes of Kicks'=>['Barrier Failure'=>'Give examples of how a kick can be caused by the failure of a mechanical barrier (for example, a barrier that is retaining pressure can fail and allow formation fluids to flow up the hole; when displacing the well to a lighter weight fluid, a barrier can fail).' ],
                    'Equipment:'=>['BOP Closing Unit and Control Panels'=>'Explain the purpose of this equipment in the well control process (for example, to operate the BOP, give feedback on whether the BOP is closed, feedback on operating pressure on the BOP, secondary stations to operate the BOP; control valves must be in the correct position and the accumulator charging pumps set correctly).','BOP Stack, Stack Valves, and Wellhead Components'=>'Explain the purpose of the key components of equipment on the BOP Stack (for example, the annular, pipe rams, Variable Bore Rams (VBR), blind/shear rams, casing rams, test rams, rubber goods, locking devices, HCR valves, drilling spool, choke and kill line connections, and wellhead connector/casing head).','Function Tests and Pressure Tests'=>'Describe a function test and a pressure test; explain the differences between the two tests.','Manifolds, Piping, and Valves'=>'Explain the function of this equipment in the well control process.'],


                    'Kick Prevention during Drilling, Casing, & Cementing Operations:'=>['Casing and Cementing Operations'=>'Explain what can increase the risk of swabbing and surging during casing operations (for example, narrow clearance; mud conditions; running or pulling speed; heave at connections; casing centralizers, etc.).','Wellbore Fluid Displacements'=>'Assess which kick prevention monitoring practices to use during displacements to lighter fluid (for example, maintain accurate volume control at all times; monitor flow rates; expected pumping pressures).'],


                    'Mud & Pit Management:'=>['Pit Management during Kill Operations'=>'Demonstrate pit line-up for a kill operation.'] ,

                    'Post ShutAIn Monitoring ft Activities:'=>['Analysis of Shut-In Conditions'=>'Explain Shut-In Drillpipe Pressure (SIDPP) and Shut-In Casing Pressure (SICP).','Monitoring fur Gas Migration, Handling Technique, and Problems with Excessive Pressures'=>'Explain how gas migration in a shut-in well can be recognized (for example, by increasing shut-in pressures after initial stabilization).'],


                    'Risk Management:'=>['Handling Kill Problems and Effect of Incorrect Procedures'=>'Identify problems that can happen during a well control operation (for example, plugging; washouts; losses; equipment issues).' , 'Safety Margin Selection'=>'Explain when to use a safety margin during a kill operation (for example, to reduce the risk of going underbalance during a well kill).']  ,
                    'Shallow Gas, Water Flows, & Tophole Drilling:'=>['Tophole Drilling Practices and Causes of Kicks'=>'Explain the causes of abnormal pressure in tophole sediments (for example, trapped fluids; the weight of overburden; charged formation).'],
                    'Shut-In Procedures & Verification:'=>['Drilling'=>'Demonstrate how to shut-in the well (for example, surface or subsea [including hang-off] the correct line-up for drilling; the hang-off capability of rams).'],
                    'Shut-In Procedures & Verification'=>['Drilling and Tripping'=>'Explain the importance of shutting in quickly (for example, to minimize influx size, SICP, and pressures on the wellbore; the importance of crew shut-in training; ensuring the crew know that if in doubt, shut it in).'],
                    'Well Control Concepts:'=>['Gas Behavior'=>'List the effects of gas on wellbore mud hydrostatic and BHP (for example, it reduces pressure as gas expands; it can cause underbalance, the gas-cut mud at surface effect, and re-circulating gas-cut mud).','Hydrostatic Pressure and Gradient'=>'Explain the terms a€cehydrostatic pressurea€ and a€oepressure gradient. a€','Pump Pressure'=>'Explain pump pressure.'],
                    'Well Control Concepts'=>['Principle of U-Tube'=>'Explain the principle of a u-tube.'],
                    'Well Control Methods:'=>['Drillera€™s Method'=>'Explain the basic principles and steps involved in the Drillera€™s Method.','Pump Startup and Shutdown Procedure'=>'Explain the importance of using startup and shutdown procedure in a well kill (for example, to maintain BHP).','Wait and Weight Method'=>'Explain the basic principles and steps involved in the Wait and Weight Method.'],
                    'Well Control Methods'=>['Pump Startup Procedure'=>'Explain why the startup procedure is so important (for example, avoid trapping pressure during startup, prevent going over or under balanced).'],





                    ];

        }
    }

    public function getFullName()
    {
        return $this->Full_Name;
    }

    public function instructorExams()
    {
        return $this->hasMany(Exam::class , 'instructor_id' , 'ID');
    }

    public function getUpcomingClasses() // upcoming courses 
    {
        $filterExams = [
          'ongoing' =>[],
          'upcoming'=>[],
          'past'=>[],  
        ];
        
        $this->instructorExams->each(function($exam) use (&$filterExams){

            (new Exam)->getClassType(true ,$exam , $filterExams   );
 
            // $startDate = Carbon::make($exam->start_date) ;
            // $startDatePlusDuration =  Carbon::make($exam->start_date)->addMinutes($exam->duration); 
            // if($startDate <= now() && $startDatePlusDuration >= now()  )
            // {
            //     array_push($filterExams['ongoing'] , $exam );
            // }
            // elseif( $startDate <= now()  && $exam->display == 0)
            // {
            //     array_push($filterExams['upcoming'] , $exam );
            // }
            // else 
            // {
            //     array_push($filterExams['past'] ,$exam );
            // }
        }) ;
        return $filterExams;
        // return [
        // 'ongoing'=> $exams->where('display',1),
        // 'upcoming'=>$exams->where('start_date' ,'>=' , now()) ,
        // 'past'=>$exams->where('start_date' , function($q){
        // });
        
        // ];  
    }

    public function getCompanyName()
    {
        return $this->company  ?: 'n/a'; 
    }

    public function getSkillScore($certification)
    {
        return $certification?  $certification->skill_score  : 0 ;
         
        
    }
    public function instructorCertification()
    {
        return $this->belongsTo(InstructorCertification::class , 'instructor_certification_id' ,'id');
    }

    
    
    
    
}
